version: "3.8"

services:
    # https://hub.docker.com/_/nginx/
    # Incoming request from client(host src) hits server first, then server forwards this to php container so we need a bind volume to share the code.
    server:
        image: "nginx:stable-alpine"
        ports:
            - "8000:80"
        volumes:
            - ./src:/var/www/html
            - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
        depends_on:
            - php
            - mysql
    php:
        # Build this interpreter and bind the volume to host so we can work on the code.
        build:
            context: ./docker
            dockerfile: php.dockerfile
        # Due to permission docker issues, we have to bind storage folder to host.
        volumes:
            - ./src:/var/www/html:delegated # Batching to improve performance as we don't need to sync the files.
            - ./src:/var/www/html/storage/logs
            - ./src:/var/www/html/storage/framework/sessions
            - ./src:/var/www/html/storage/framework/views
            - ./src:/var/www/html/storage/framework/cache

        # https://github.com/docker-library/php/blob/50c8b1ceaefdaebc4df51322f1e0dc149a1cda15/8.3-rc/alpine3.19/fpm/Dockerfile
        # This image exposes port 9000, and we can map nginx to it inside nginx.conf.
    mysql:
        image: mysql:5.7
        env_file:
            - ./env/mysql.env

    # Utility container only for building the app.
    composer:
        build:
            context: ./docker
            dockerfile: composer.dockerfile
        # Reflecting the volume from composer container to host. When app is installed in container, we will get the app in src folder in host.
        volumes:
            - ./src:/var/www/html
    # Utility container, a command for PHP. Populating the database.
    # php does not have entrypoint in dockerfile, so we use entrypoint here.
    artisan:
        build:
            context: ./docker
            dockerfile: php.dockerfile
        volumes:
            - ./src:/var/www/html
        entrypoint: ["php", "/var/www/html/artisan"]
    # Utility container, node - This could be in a Dockerfile, we can also run it here.
    npm:
        image: node:14
        working_dir: /var/www/html
        entrypoint: ["npm"]
        volumes:
            - ./src:/var/www/html
